package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/barrybeics/botServer/database"
	"github.com/barrybeics/botServer/graph/model"
	"github.com/rs/zerolog/log"
)

// MutationResolver implementation
func (r *mutationResolver) CreateActivityReport(ctx context.Context, input *model.NewActivityReport) (*model.ActivityReport, error) {
	return db.SaveActivityReport(input), nil
}

// CreateTradeOutcomeReport is the resolver for the createTradeOutcomeReport field.
func (r *mutationResolver) CreateTradeOutcomeReport(ctx context.Context, input *model.NewTradeOutcomeReport) (*model.TradeOutcomeReport, error) {
	return db.SaveTradeOutcomeReport(input), nil
}

func (r *mutationResolver) CreateHistoricPrices(ctx context.Context, input *model.NewHistoricPriceInput) ([]*model.HistoricPrices, error) {
	// Assuming you want to save multiple HistoricPrices in the input
	insertedHistoricPrices := db.SaveHistoricPrices(input)
	return insertedHistoricPrices, nil
}

// ActivityReport is the resolver for the ActivityReport field.
func (r *queryResolver) ActivityReport(ctx context.Context, id string) (*model.ActivityReport, error) {
	return db.FindActivityReportByID(id), nil
}

// ActivityReports is the resolver for the ActivityReports field.
func (r *queryResolver) ActivityReports(ctx context.Context) ([]*model.ActivityReport, error) {
	return db.AllActivityReports(), nil
}

// TradeOutcomeReport is the resolver for the TradeOutcomeReport field.
func (r *queryResolver) TradeOutcomeReport(ctx context.Context, id string) (*model.TradeOutcomeReport, error) {
	return db.FindTradeOutcomeReportByID(id), nil
}

// TradeOutcomeReports is the resolver for the TradeOutcomeReports field.
func (r *queryResolver) TradeOutcomeReports(ctx context.Context) ([]*model.TradeOutcomeReport, error) {
	return db.AllTradeOutcomeReports(), nil
}

// GetHistoricPrice is the resolver for the getHistoricPrice field.
func (r *queryResolver) GetHistoricPrice(ctx context.Context, symbol string) ([]*model.HistoricPrices, error) {
	historicPrices, err := db.HistoricPricesBySymbol(symbol, 40)
	if err != nil {
		log.Error().Err(err).Msg("Error getting historic prices")
		return nil, err
	}

	// Convert slice of model.HistoricPrice to slice of *model.HistoricPrice
	var result []*model.HistoricPrices
	for i := range historicPrices {
		result = append(result, &historicPrices[i])
	}

	// Return the slice of pointers to historic prices
	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

var db = database.Connect()
